{"/home/travis/build/npmtest/node-npmtest-vueify/test.js":"/* istanbul instrument in package npmtest_vueify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vueify/lib.npmtest_vueify.js":"/* istanbul instrument in package npmtest_vueify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vueify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vueify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vueify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vueify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vueify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vueify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vueify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vueify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vueify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vueify.__dirname + '/lib.npmtest_vueify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/index.js":"var through = require('through')\nvar compiler = require('./lib/compiler')\n\nmodule.exports = function vueify (file, options) {\n  if (!/.vue$/.test(file)) {\n    return through()\n  }\n\n  compiler.loadConfig()\n  compiler.applyConfig(options)\n  compiler.applyConfig({\n    sourceMap: options._flags.debug\n  })\n\n  var data = ''\n  var stream = through(write, end)\n  stream.vueify = true\n\n  function dependency (file) {\n    stream.emit('file', file)\n  }\n\n  function emitStyle (e) {\n    stream.emit('vueify-style', e)\n  }\n\n  function write (buf) {\n    data += buf\n  }\n\n  function end () {\n    stream.emit('file', file)\n    compiler.on('dependency', dependency)\n    compiler.on('style', emitStyle)\n\n    compiler.compile(data, file, function (error, result) {\n      compiler.removeListener('dependency', dependency)\n      compiler.removeListener('style', emitStyle)\n      if (error) {\n        stream.emit('error', error)\n        // browserify doesn't log the stack by default...\n        console.error(error.stack.replace(/^.*?\\n/, ''))\n      }\n      stream.queue(result)\n      stream.queue(null)\n    })\n  }\n\n  return stream\n}\n\n// expose compiler\nmodule.exports.compiler = compiler\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/compiler.js":"var fs = require('fs')\nvar path = require('path')\nvar chalk = require('chalk')\nvar hash = require('hash-sum')\nvar Emitter = require('events').EventEmitter\nvar vueCompiler = require('vue-template-compiler')\nvar sourceMap = require('source-map')\nvar convert = require('convert-source-map')\n\nvar genId = require('./gen-id')\nvar normalize = require('./normalize')\nvar compilers = require('./compilers')\nvar rewriteStyle = require('./style-rewriter')\nvar compileTemplate = require('./template-compiler')\n\n// determine dynamic script paths\nvar hotReloadAPIPath = normalize.dep('vue-hot-reload-api')\nvar insertCSSPath = normalize.lib('insert-css')\n\nvar hasBabel = true\ntry {\n  require('babel-core')\n} catch (e) {\n  hasBabel = false\n}\n\nvar splitRE = /\\r?\\n/g\nvar resolvedPartsCache = Object.create(null)\n\n// expose compiler\nvar compiler = module.exports = new Emitter()\ncompiler.setMaxListeners(Infinity)\n\n// options\nvar options = compiler.options = {}\n\n// load user config\ncompiler.loadConfig = function () {\n  var fs = require('fs')\n  var path = require('path')\n  var configPath = path.resolve(process.cwd(), 'vue.config.js')\n  if (fs.existsSync(configPath)) {\n    compiler.applyConfig(require(configPath))\n  }\n}\n\n// apply config\ncompiler.applyConfig = function (config) {\n  // copy user options to default options\n  Object.keys(config).forEach(function (key) {\n    if (key !== 'customCompilers') {\n      options[key] = config[key]\n    } else {\n      // register compilers\n      Object.keys(config[key]).forEach(function (name) {\n        compilers[name] = config[key][name]\n      })\n    }\n  })\n}\n\ncompiler.compile = function (content, filePath, cb) {\n  var isProduction = process.env.NODE_ENV === 'production'\n  var isServer = process.env.VUE_ENV === 'server'\n  var isTest = !!process.env.VUEIFY_TEST\n\n  // generate css scope id\n  var id = 'data-v-' + genId(filePath)\n  // parse the component into parts\n  var parts = vueCompiler.parseComponent(content, { pad: true })\n\n  // check for scoped style nodes\n  var hasScopedStyle = parts.styles.some(function (style) {\n    return style.scoped\n  })\n\n  var resolvedParts = {\n    template: null,\n    script: null,\n    styles: []\n  }\n\n  Promise.all([\n    processTemplate(parts.template, filePath, resolvedParts),\n    processScript(parts.script, filePath, resolvedParts)\n  ].concat(parts.styles.map(function (style) {\n    return processStyle(style, filePath, id, resolvedParts)\n  })))\n  .then(mergeParts)\n  .catch(cb)\n\n  function mergeParts () {\n    // check whether script/template has changed\n    var prevParts = resolvedPartsCache[id] || {}\n    resolvedPartsCache[id] = resolvedParts\n    var scriptChanged = resolvedParts.script !== prevParts.script\n    var templateChanged = resolvedParts.template !== prevParts.template\n\n    var output = ''\n    var map = null\n    // styles\n    var style = resolvedParts.styles.join('\\n')\n    if (style && !isServer) {\n      // emit style\n      compiler.emit('style', {\n        file: filePath,\n        style: style\n      })\n      if (!options.extractCSS) {\n        style = JSON.stringify(style)\n        output +=\n          'var __vueify_style_dispose__ = require(\"' + insertCSSPath + '\").insert(' + style + ')\\n'\n      }\n    }\n    // script\n    var script = resolvedParts.script\n    if (script) {\n      if (options.sourceMap) {\n        map = generateSourceMap(script, output)\n      }\n      output +=\n        ';(function(){\\n' + script + '\\n})()\\n' +\n        // babel 6 compat\n        'if (module.exports.__esModule) module.exports = module.exports.default\\n'\n    }\n    // in case the user exports with Vue.extend\n    output += 'var __vue__options__ = (typeof module.exports === \"function\"' +\n      '? module.exports.options' +\n      ': module.exports)\\n'\n    // template\n    var template = resolvedParts.template\n    if (template) {\n      if (!isProduction && !isServer) {\n        output +=\n          'if (__vue__options__.functional) {console.error(\"' +\n            '[vueify] functional components are not supported and ' +\n            'should be defined in plain js files using render functions.' +\n          '\")}\\n'\n      }\n      var beforeLines\n      if (map) {\n        beforeLines = output.split(splitRE).length\n      }\n      output +=\n        '__vue__options__.render = ' + template.render + '\\n' +\n        '__vue__options__.staticRenderFns = ' + template.staticRenderFns + '\\n'\n      if (map) {\n        addTemplateMapping(content, parts, output, map, beforeLines)\n      }\n    }\n    // scoped CSS id\n    if (hasScopedStyle) {\n      output += '__vue__options__._scopeId = \"' + id + '\"\\n'\n    }\n    // hot reload\n    if (!isProduction && !isTest && !isServer) {\n      output +=\n        'if (module.hot) {(function () {' +\n        '  var hotAPI = require(\"' + hotReloadAPIPath + '\")\\n' +\n        '  hotAPI.install(require(\"vue\"), true)\\n' +\n        '  if (!hotAPI.compatible) return\\n' +\n        '  module.hot.accept()\\n' +\n        // remove style tag on dispose\n        (style && !options.extractCSS\n          ? '  module.hot.dispose(__vueify_style_dispose__)\\n'\n          : '') +\n        '  if (!module.hot.data) {\\n' +\n        // initial insert\n        '    hotAPI.createRecord(\"' + id + '\", __vue__options__)\\n' +\n        '  } else {\\n' +\n        // update\n          (scriptChanged\n            ? '    hotAPI.reload(\"' + id + '\", __vue__options__)\\n'\n            : templateChanged\n              ? '    hotAPI.rerender(\"' + id + '\", __vue__options__)\\n'\n              : ''\n          ) +\n        '  }\\n' +\n        '})()}'\n    }\n    if (map) {\n      output += '\\n' + convert.fromJSON(map.toString()).toComment()\n    }\n    cb(null, output)\n  }\n\n  function generateSourceMap (script, output) {\n    // hot-reload source map busting\n    var hashedFilename = path.basename(filePath) + '?' + hash(filePath + content)\n    var map = new sourceMap.SourceMapGenerator()\n    map.setSourceContent(hashedFilename, content)\n    // check input source map from babel/coffee etc\n    var inMap = resolvedParts.map\n    var inMapConsumer = inMap && new sourceMap.SourceMapConsumer(inMap)\n    var generatedOffset = (output ? output.split(splitRE).length : 0) + 1\n    script.split(splitRE).forEach(function (line, index) {\n      var ln = index + 1\n      var originalLine = inMapConsumer\n        ? inMapConsumer.originalPositionFor({ line: ln, column: 0 }).line\n        : ln\n      if (originalLine) {\n        map.addMapping({\n          source: hashedFilename,\n          generated: {\n            line: ln + generatedOffset,\n            column: 0\n          },\n          original: {\n            line: originalLine,\n            column: 0\n          }\n        })\n      }\n    })\n    map._hashedFilename = hashedFilename\n    return map\n  }\n}\n\nfunction addTemplateMapping (content, parts, output, map, beforeLines) {\n  var afterLines = output.split(splitRE).length\n  var templateLine = content.slice(0, parts.template.start).split(splitRE).length\n  for (; beforeLines < afterLines; beforeLines++) {\n    map.addMapping({\n      source: map._hashedFilename,\n      generated: {\n        line: beforeLines,\n        column: 0\n      },\n      original: {\n        line: templateLine,\n        column: 0\n      }\n    })\n  }\n}\n\nfunction processTemplate (part, filePath, parts) {\n  if (!part) return Promise.resolve()\n  var template = getContent(part, filePath)\n  return compileAsPromise('template', template, part.lang, filePath)\n    .then(function (res) {\n      parts.template = compileTemplate(res, compiler)\n    })\n}\n\nfunction processScript (part, filePath, parts) {\n  if (!part) return Promise.resolve()\n  var lang = part.lang || (hasBabel ? 'babel' : null)\n  var script = getContent(part, filePath)\n  return compileAsPromise('script', script, lang, filePath)\n    .then(function (res) {\n      if (typeof res === 'string') {\n        parts.script = res\n      } else {\n        parts.script = res.code\n        parts.map = res.map\n      }\n    })\n}\n\nfunction processStyle (part, filePath, id, parts) {\n  var style = getContent(part, filePath)\n  return compileAsPromise('style', style, part.lang, filePath)\n    .then(function (res) {\n      res = res.trim()\n      return rewriteStyle(id, res, part.scoped, options).then(function (res) {\n        parts.styles.push(res)\n      })\n    })\n}\n\nfunction getContent (part, filePath) {\n  return part.src\n    ? loadSrc(part.src, filePath)\n    : part.content\n}\n\nfunction loadSrc (src, filePath) {\n  var dir = path.dirname(filePath)\n  var srcPath = path.resolve(dir, src)\n  compiler.emit('dependency', srcPath)\n  try {\n    return fs.readFileSync(srcPath, 'utf-8')\n  } catch (e) {\n    console.error(chalk.red(\n      'Failed to load src: \"' + src +\n      '\" from file: \"' + filePath + '\"'\n    ))\n  }\n}\n\nfunction compileAsPromise (type, source, lang, filePath) {\n  var compile = compilers[lang]\n  if (compile) {\n    return new Promise(function (resolve, reject) {\n      compile(source, function (err, res) {\n        if (err) {\n          // report babel error codeframe\n          if (err.codeFrame) {\n            process.nextTick(function () {\n              console.error(err.codeFrame)\n            })\n          }\n          return reject(err)\n        }\n        resolve(res)\n      }, compiler, filePath)\n    })\n  } else {\n    return Promise.resolve(source)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/gen-id.js":"// utility for generating a uid for each component file\n// used in scoped CSS rewriting\nvar hash = require('hash-sum')\nvar cache = Object.create(null)\n\nmodule.exports = function genId (file) {\n  return cache[file] || (cache[file] = hash(file))\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/normalize.js":"var IS_TEST = !!process.env.VUEIFY_TEST\nvar fs = require('fs')\nvar path = require('path')\n\nexports.lib = function (file) {\n  if (IS_TEST) {\n    return path.resolve(__dirname, file)\n  } else {\n    return 'vueify/lib/' + file\n  }\n}\n\nexports.dep = function (dep) {\n  if (IS_TEST) {\n    return dep\n  } else if (fs.existsSync(path.resolve(__dirname, '../node_modules', dep))) {\n    // npm 2 or npm linked\n    return 'vueify/node_modules/' + dep\n  } else {\n    // npm 3\n    return dep\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/compilers/index.js":"// built-in compilers\nmodule.exports = {\n  coffee: require('./coffee'),\n  babel: require('./babel'),\n  less: require('./less'),\n  sass: require('./sass'),\n  scss: require('./sass'),\n  stylus: require('./stylus'),\n  jade: require('./jade'),\n  pug: require('./pug')\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/compilers/coffee.js":"var ensureRequire = require('../ensure-require.js')\n\nmodule.exports = function (raw, cb, compiler) {\n  ensureRequire('coffee', ['coffee-script'])\n  var coffee = require('coffee-script')\n  var compiled\n  try {\n    compiled = coffee.compile(raw, compiler.options.coffee || {\n      bare: true,\n      sourceMap: compiler.options.sourceMap\n    })\n  } catch (err) {\n    return cb(err)\n  }\n  if (compiler.options.sourceMap) {\n    compiled = {\n      code: compiled.js,\n      map: compiled.v3SourceMap\n    }\n  }\n  cb(null, compiled)\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/ensure-require.js":"module.exports = function (name, deps) {\n  var i, len\n  var missing = []\n  if (typeof deps === 'string') {\n    deps = [deps]\n  }\n  for (i = 0, len = deps.length; i < len; i++) {\n    var mis\n    var req = deps[i]\n    if (typeof req === 'string') {\n      mis = req\n    } else {\n      mis = req[1]\n      req = req[0]\n    }\n    try {\n      // hack for babel-runtime because it does not expose \"main\" field\n      if (req === 'babel-runtime') {\n        req = 'babel-runtime/core-js'\n      }\n      require.resolve(req)\n    } catch (e) {\n      missing.push(mis)\n    }\n  }\n  if (missing.length > 0) {\n    var message = 'You are trying to use \"' + name + '\". '\n    var npmInstall = 'npm install --save-dev ' + missing.join(' ')\n    if (missing.length > 1) {\n      var last = missing.pop()\n      message += missing.join(', ') + ' and ' + last + ' are '\n    } else {\n      message += missing[0] + ' is '\n    }\n    message += 'missing.\\n\\nTo install run:\\n' + npmInstall\n    throw new Error(message)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/compilers/babel.js":"var fs = require('fs')\nvar path = require('path')\nvar json = require('json5')\nvar assign = require('object-assign')\nvar ensureRequire = require('../ensure-require')\n\nvar defaultBabelOptions = {\n  presets: ['es2015'],\n  plugins: ['transform-runtime']\n}\n\nvar babelRcPath = path.resolve(process.cwd(), '.babelrc')\nvar babelOptions = fs.existsSync(babelRcPath)\n  ? getBabelRc() || defaultBabelOptions\n  : defaultBabelOptions\n\nfunction getBabelRc () {\n  var rc\n  try {\n    rc = json.parse(fs.readFileSync(babelRcPath, 'utf-8'))\n  } catch (e) {\n    throw new Error('[vueify] Your .babelrc seems to be incorrectly formatted.')\n  }\n  return rc\n}\n\nmodule.exports = function (raw, cb, compiler, filePath) {\n  if ((compiler.options.babel || babelOptions) === defaultBabelOptions) {\n    try {\n      ensureRequire('babel', ['babel-preset-es2015', 'babel-runtime', 'babel-plugin-transform-runtime'])\n    } catch (e) {\n      console.error(e.message)\n      console.error(\n        '\\n^^^ You are seeing this because you are using Vueify\\'s default babel ' +\n        'configuration. You can override this with .babelrc or the babel option ' +\n        'in vue.config.js.'\n      )\n    }\n  }\n\n  try {\n    var babel = require('babel-core')\n    var options = assign({\n      comments: false,\n      filename: filePath,\n      sourceMaps: compiler.options.sourceMap\n    }, compiler.options.babel || babelOptions)\n    var res = babel.transform(raw, options)\n  } catch (err) {\n    return cb(err)\n  }\n  cb(null, res)\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/compilers/less.js":"var assign = require('object-assign')\nvar path = require('path')\nvar ensureRequire = require('../ensure-require.js')\n\nmodule.exports = function (raw, cb, compiler, filePath) {\n  ensureRequire('less', 'less')\n  var less = require('less')\n\n  var opts = assign({\n    filename: path.basename(filePath)\n  }, compiler.options.less)\n\n  // provide import path\n  var dir = path.dirname(filePath)\n  var paths = [dir, process.cwd()]\n  opts.paths = opts.paths\n    ? opts.paths.concat(paths)\n    : paths\n\n  less.render(raw, opts, function (err, res) {\n    if (err) {\n      return cb(err)\n    }\n    // Less 2.0 returns an object instead rendered string\n    if (typeof res === 'object') {\n      res.imports.forEach(function (file) {\n        compiler.emit('dependency', file)\n      })\n      res = res.css\n    }\n    cb(null, res)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/compilers/sass.js":"var assign = require('object-assign')\nvar path = require('path')\nvar ensureRequire = require('../ensure-require.js')\n\nmodule.exports = function (raw, cb, compiler, filePath) {\n  ensureRequire('sass', 'node-sass')\n  var sass = require('node-sass')\n\n  var sassOptions = assign({\n    data: raw,\n    success: function (res) {\n      if (typeof res === 'object') {\n        cb(null, res.css)\n      } else {\n        cb(null, res) // compat for node-sass < 2.0.0\n      }\n    },\n    error: function (err) {\n      cb(err)\n    }\n  }, compiler.options.sass || {\n    sourceComments: true\n  })\n\n  var dir = path.dirname(filePath)\n  var paths = [dir, process.cwd()]\n  sassOptions.includePaths = sassOptions.includePaths\n    ? sassOptions.includePaths.concat(paths)\n    : paths\n\n  sass.render(\n    sassOptions,\n    // callback for node-sass > 3.0.0\n    function (err, res) {\n      if (err) {\n        cb(err)\n      } else {\n        res.stats.includedFiles.forEach(function (file) {\n          compiler.emit('dependency', file)\n        })\n        cb(null, res.css.toString())\n      }\n    }\n  )\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/compilers/stylus.js":"var assign = require('object-assign')\nvar path = require('path')\nvar ensureRequire = require('../ensure-require.js')\n\nmodule.exports = function (raw, cb, compiler, filePath) {\n  ensureRequire('stylus', 'stylus')\n  var stylus = require('stylus')\n\n  var opts = assign({\n    filename: path.basename(filePath)\n  }, compiler.options.stylus || {})\n\n  var dir = path.dirname(filePath)\n  var paths = [dir, process.cwd()]\n  opts.paths = opts.paths\n    ? opts.paths.concat(paths)\n    : paths\n\n  // using the renderer API so that we can\n  // check deps after compilation\n  var renderer = stylus(raw)\n  Object.keys(opts).forEach(function (key) {\n    renderer.set(key, opts[key])\n  })\n\n  renderer.render(function (err, css) {\n    if (err) return cb(err)\n    renderer.deps().forEach(function (file) {\n      compiler.emit('dependency', file)\n    })\n    cb(null, css)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/compilers/jade.js":"var ensureRequire = require('../ensure-require.js')\n\nmodule.exports = function (raw, cb, compiler) {\n  ensureRequire('jade', 'jade')\n  var jade = require('jade')\n  try {\n    var html = jade.compile(raw, compiler.options.jade || {})()\n  } catch (err) {\n    return cb(err)\n  }\n  cb(null, html)\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/compilers/pug.js":"var ensureRequire = require('../ensure-require.js')\n\nmodule.exports = function (raw, cb, compiler) {\n  ensureRequire('pug', 'pug')\n  var pug = require('pug')\n  try {\n    var html = pug.compile(raw, compiler.options.pug || {})()\n  } catch (err) {\n    return cb(err)\n  }\n  cb(null, html)\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/style-rewriter.js":"var postcss = require('postcss')\nvar selectorParser = require('postcss-selector-parser')\nvar cache = require('lru-cache')(100)\nvar assign = require('object-assign')\n\nvar currentId\nvar addId = postcss.plugin('add-id', function () {\n  return function (root) {\n    root.each(function rewriteSelector (node) {\n      if (!node.selector) {\n        // handle media queries\n        if (node.type === 'atrule' && node.name === 'media') {\n          node.each(rewriteSelector)\n        }\n        return\n      }\n      node.selector = selectorParser(function (selectors) {\n        selectors.each(function (selector) {\n          var node = null\n          selector.each(function (n) {\n            if (n.type !== 'pseudo') node = n\n          })\n          selector.insertAfter(node, selectorParser.attribute({\n            attribute: currentId\n          }))\n        })\n      }).process(node.selector).result\n    })\n  }\n})\n\n/**\n * Add attribute selector to css\n *\n * @param {String} id\n * @param {String} css\n * @param {Boolean} scoped\n * @param {Object} options\n * @return {Promise}\n */\n\nmodule.exports = function (id, css, scoped, options) {\n  var key = id + '!!' + scoped + '!!' + css\n  var val = cache.get(key)\n  if (val) {\n    return Promise.resolve(val)\n  } else {\n    var plugins = []\n    var opts = {}\n\n    if (options.postcss instanceof Array) {\n      plugins = options.postcss.slice()\n    } else if (options.postcss instanceof Object) {\n      plugins = options.postcss.plugins || []\n      opts = options.postcss.options\n    }\n\n    // scoped css rewrite\n    // make sure the addId plugin is only pushed once\n    if (scoped && plugins.indexOf(addId) === -1) {\n      plugins.push(addId)\n    }\n\n    // remove the addId plugin if the style block is not scoped\n    if (!scoped && plugins.indexOf(addId) !== -1) {\n      plugins.splice(plugins.indexOf(addId), 1)\n    }\n\n    // minification\n    if (process.env.NODE_ENV === 'production') {\n      plugins.push(require('cssnano')(assign({\n        safe: true\n      }, options.cssnano)))\n    }\n    currentId = id\n    return postcss(plugins)\n      .process(css, opts)\n      .then(function (res) {\n        cache.set(key, res.css)\n        return res.css\n      })\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/template-compiler.js":"var chalk = require('chalk')\nvar vueCompiler = require('vue-template-compiler')\nvar transpile = require('vue-template-es2015-compiler')\n\nmodule.exports = function compileTemplate (template, compiler) {\n  var compiled = vueCompiler.compile(template)\n  if (compiled.errors.length) {\n    compiled.errors.forEach(function (msg) {\n      console.error('\\n' + chalk.red(msg) + '\\n')\n    })\n    throw new Error('Vue template compilation failed')\n  } else {\n    return {\n      render: toFunction(compiled.render),\n      staticRenderFns: '[' + compiled.staticRenderFns.map(toFunction).join(',') + ']'\n    }\n  }\n}\n\nfunction toFunction (code) {\n  return transpile('function render () {' + code + '}')\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/lib/insert-css.js":"var inserted = exports.cache = {}\n\nfunction noop () {}\n\nexports.insert = function (css) {\n  if (inserted[css]) return noop\n  inserted[css] = true\n\n  var elem = document.createElement('style')\n  elem.setAttribute('type', 'text/css')\n\n  if ('textContent' in elem) {\n    elem.textContent = css\n  } else {\n    elem.styleSheet.cssText = css\n  }\n\n  document.getElementsByTagName('head')[0].appendChild(elem)\n  return function () {\n    document.getElementsByTagName('head')[0].removeChild(elem)\n    inserted[css] = false\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vueify/node_modules/vueify/plugins/extract-css.js":"var fs = require('fs')\nvar compiler = require('../lib/compiler')\n\nmodule.exports = function (b, opts) {\n  compiler.applyConfig({\n    extractCSS: true\n  })\n\n  var styles = Object.create(null)\n  var outPath = opts.out || opts.o || 'bundle.css'\n\n  b.on('bundle', function (bs) {\n    bs.on('end', function () {\n      var css = Object.keys(styles)\n        .map(function (file) { return styles[file] })\n        .join('\\n')\n      if (typeof outPath === 'object' && outPath.write) {\n        outPath.write(css)\n        outPath.end()\n      } else if (typeof outPath === 'string') {\n        fs.writeFile(outPath, css, function () {})\n      }\n    })\n  })\n\n  b.on('transform', function (tr, file) {\n    if (tr.vueify) {\n      tr.on('vueify-style', function (e) {\n        styles[e.file] = e.style\n      })\n    }\n  })\n}\n"}